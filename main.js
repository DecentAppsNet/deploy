import{execSync as dt}from"child_process";async function S(t,e){let o=t.length,n=[...t];return new Promise((s,r)=>{function a(c){c().then(()=>{if(--o===0){s();return}if(n&&n.length){let u=n.pop();u&&a(u)}}).catch(u=>r(u))}let i=Math.min(e,t.length);for(let c=0;c<i;++c){let u=n.pop();u&&a(u)}}).catch(s=>{throw s})}function Q(t){return/^[0-9a-f]{7}$/i.test(t)}function Z(t){return/^[0-9a-f]{40}$/i.test(t)}function E(t){return Q(t)||Z(t)}function T(t){return t.length>7?t.slice(0,7):t}var y=class extends Error{constructor(e){super(e),this.name="ExpectedError"}},l=y;function tt(t){console.error(`::error::${t}`)}function w(t){console.warn(`::warning::${t}`)}function et(t){console.log(`::notice::${t}`)}function O(t){et(`\u2705 ${t}`)}function p(t){console.log(t)}function x(t){tt(t),process.exit(1)}function h(t){console.log(`::group::${t}`)}function m(){console.log("::endgroup::")}function $(t,e=!1){let o=`INPUT_${t.replace(/ /g,"_").toUpperCase()}`,n=process.env[o];return e&&!n&&x(`Input ${t} is required.`),n||""}function V(){let t=process.env.GITHUB_SHA;if(!t)throw new l("GITHUB_SHA environment variable is not set.");if(!E(t))throw new l("GITHUB_SHA environment variable is invalid.");return T(t)}function I(){let t=process.env.GITHUB_REPOSITORY_OWNER;if(!t)throw new l("GITHUB_REPOSITORY_OWNER environment variable is not set.");return t}function _(){let t=process.env.GITHUB_WORKSPACE;if(!t)throw new l("GITHUB_WORKSPACE environment variable is not set.");return t}function F(){return process.env.GITHUB_ACTIONS==="true"}import{opendir as nt,stat as k,mkdir as ot}from"fs/promises";import{createReadStream as Ct,createWriteStream as rt}from"fs";import A from"path";async function U(t){let e=[];async function o(n){let s=await nt(n);for await(let r of s){let a=A.join(n,r.name);r.isDirectory()?await o(a):e.push(a)}}return await o(t),e}async function st(t){try{return(await k(t)).isDirectory()}catch{return!1}}async function q(t){try{return(await k(t)).isFile()}catch{return!1}}async function H(t){await st(t)||await ot(t,{recursive:!0})}async function it(t,e){return new Promise((o,n)=>{let s=rt(t);s.write(e),s.end(),s.on("finish",()=>o()),s.on("error",r=>n(r))}).catch(o=>{throw o})}async function at(t,e){return it(t,e)}async function B(t,e){let o=A.join(e,"version.txt");return await at(o,t)}import*as v from"node:https";import{createReadStream as ct}from"fs";import{stat as ut}from"fs/promises";async function N(t,e){let o=await ut(e);return new Promise((n,s)=>{t.headers||(t.headers={}),t.headers["Content-Length"]=o.size;let r=v.request(t,i=>{let c="";i.on("data",u=>{c+=u}),i.on("end",async()=>{i.statusCode&&i.statusCode>=200&&i.statusCode<300?n({statusCode:i.statusCode,body:c}):s(new l(`Request to ${t.hostname} failed with status code: ${i.statusCode}. Response: ${c}`))})});r.on("error",i=>s(i));let a=ct(e);a.pipe(r),a.on("end",()=>r.end()),a.on("error",i=>{r.destroy(),s(i)})}).catch(n=>{throw n})}async function D(t,e){return new Promise((o,n)=>{t.headers||(t.headers={}),t.headers["Content-Length"]=Buffer.byteLength(e);let s=v.request(t,r=>{let a="";r.on("data",i=>{a+=i}),r.on("end",async()=>{r.statusCode&&r.statusCode>=200&&r.statusCode<300?o({statusCode:r.statusCode,body:a}):n(new l(`Request to ${t.hostname} failed with status code: ${r.statusCode}. Response: ${a}`))})});s.on("error",r=>n(r)),s.write(e),s.end()}).catch(o=>{throw o})}var C="1.0",G=`v${C} Decent Tools`;function pt(t){let e="<!-- v",o=t.indexOf(e);if(o===-1)return null;let n=o+e.length,s=t.indexOf(" ",n);return s===-1?null:t.substring(n,s)}function R(t,e){let o=` ${e}='`,n=t.indexOf(o);if(n===-1)return null;let s=n+o.length,r=t.indexOf("'",s);return r===-1?null:t.substring(s,r)}function lt(t){let e=pt(t);if(!e)throw Error("Failed to parse stage index format version.");if(e!==C)throw Error(`Unsupported stage index format version ${e}.`);return e}function L(){return{productionVersion:"",rollbackVersion:"",stageVersion:""}}function j(t,e,o,n){let s=`/_${t}/${e}/`;return`<!DOCTYPE html><html><head><title>Stage Index for ${t}</title><script>
<!-- ${G}. Hand-edit at your own risk! -->
const productionVersion='${o}';
const rollbackVersion='${n}';
const stageVersion='${e}';
window.location.href='${s}';
</script></head><body></body></html>`}async function W(t){let e=`https://decentapps.net/_${t}/index.html`,o=await fetch(e);if(!o.ok)return L();let n=await o.text();try{lt(n)}catch(i){return w(`Could not retrieve app versions from existing stage index at ${e}: ${i.message}.`),L()}let s=R(n,"productionVersion")??"",r=R(n,"rollbackVersion")??"";return{stageVersion:R(n,"stageVersion")??"",productionVersion:s,rollbackVersion:r}}var M="partner.decentapps.net";async function z(t,e,o,n,s,r){let a=r.replace(s,""),i={hostname:M,path:`/api/deployment/${o}/${n}/${a}`,port:443,method:"PUT",headers:{"Content-Type":"application/octet-stream",Authorization:`Bearer ${e}`,"x-repo-owner":t,Accept:"application/json"}},c=await N(i,r);if(c.statusCode<200||c.statusCode>=300)throw new l(`Failed to upload file to partner service. Status code: ${c.statusCode}. Response: ${c.body}`)}async function K(t,e,o,n,s,r,a){let i=a?`/api/deployment/${o}/index.html`:`/api/deployment/${o}/index.html?updateRoute=true`,c={hostname:M,path:i,port:443,method:"PUT",headers:{"Content-Type":"text/html",Authorization:`Bearer ${e}`,"x-repo-owner":t,Accept:"application/json"}},u=j(o,n,s,r),g=await D(c,u);if(g.statusCode<200||g.statusCode>=300)throw new Error(`Failed to upload file to partner service. Status code: ${g.statusCode}. Response: ${g.body}`)}async function ft(){try{h("Collecting required inputs"),p("commit hash");let t=V();p("repo owner");let e=I();p("Decent API key");let o=$("api-key",!0);p("app name");let n=$("app-name",!0);p("project local path");let s=_();m(),h("Preparing local dist path and version file");let r=`${s}/dist/`;p("create dist directory"),await H(r),p("write version file"),await B(t,r),m(),h("Running build command"),p("check for package.json"),await q(`${s}/package.json`)?(p("package.json found. Running npm run build to build to ./dist directory."),dt("npm run build",{stdio:"inherit"})):p("No package.json found. Relying on the ./dist directory being pre-built."),m(),h("Preparing files for upload");async function a(f){let d=i[f];if(d!=="")try{p(`upload ${d}`),await z(e,o,n,t,r,d),i[f]="",++u}catch(J){console.warn(`Failed to upload file ${d}: ${J.message}.`)}}p("find files at local dist path");let i=await U(r);i.length===1&&w("No files found in ./dist directory besides version.txt. Is your project building to ./dist?"),p("prepare upload tasks");let c=i.map((f,d)=>()=>a(d));m(),h(`Uploading ${c.length} files`);let u=0,g=3,Y=10;for(let f=0;f<g;++f){f>0&&console.warn(`Retrying after failed uploads... (${f+1}/${g})`);try{if(await S(c,Y),u===i.length)break}catch(d){d(`Unexpected error while uploading files: ${d.message}.`)}}u<i.length&&(u===0&&x("Failed to upload any files. See previous warnings for details."),x(`Failed to upload all files. Only ${u} of ${i.length} files were uploaded successfully. See previous warnings for details.`)),m(),h("Updating stage index"),p("fetch app versions");let{productionVersion:b,rollbackVersion:P}=await W(n);p(`uploading new stage index - stage version=${t}, production version=${b}, rollback version=${P}`),await K(e,o,n,t,b,P,!1),m();let X=`https://decentapps.net/_${n}/${t}/`;O(`Successfully deployed ${u} files to ${X}.`)}catch(t){let o=!F()||t.name==="ExpectedError"?t.message:"An unexpected error occurred.";x(o)}}ft();
