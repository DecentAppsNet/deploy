async function $(t,e){let n=t.length,o=[...t];return new Promise((r,s)=>{function i(c){c().then(()=>{if(--n===0){r();return}if(o&&o.length){let u=o.pop();u&&i(u)}}).catch(u=>s(u))}let a=Math.min(e,t.length);for(let c=0;c<a;++c){let u=o.pop();u&&i(u)}}).catch(r=>{throw r})}function j(t){return/^[0-9a-f]{7}$/i.test(t)}function z(t){return/^[0-9a-f]{40}$/i.test(t)}function C(t){return j(t)||z(t)}function v(t){return t.length>7?t.slice(0,7):t}var h=class extends Error{constructor(e){super(e),this.name="ExpectedError"}},l=h;function K(t){console.error(`::error::${t}`)}function R(t){console.warn(`::warning::${t}`)}function Y(t){console.log(`::notice::${t}`)}function S(t){Y(`\u2705 ${t}`)}function P(t){console.log(t)}function g(t){K(t),process.exit(1)}function m(t,e=!1){let n=`INPUT_${t.replace(/ /g,"_").toUpperCase()}`,o=process.env[n];return e&&!o&&g(`Input ${t} is required.`),o||""}function b(){let t=process.env.GITHUB_SHA;if(!t)throw new l("GITHUB_SHA environment variable is not set.");if(!C(t))throw new l("GITHUB_SHA environment variable is invalid.");return v(t)}function E(){let t=process.env.GITHUB_REPOSITORY_OWNER;if(!t)throw new l("GITHUB_REPOSITORY_OWNER environment variable is not set.");return t}function V(){let t=process.env.GITHUB_WORKSPACE;if(!t)throw new l("GITHUB_WORKSPACE environment variable is not set.");return t}var X=["key","token","password","secret"];function J(t){if(!t)return t;let e=t.charAt(0),n=t.charAt(t.length-1);return`${e}...${n}`}function O(){let t=Object.entries(process.env).map(([e,n])=>{let o=e.toLowerCase();return X.some(r=>o.includes(r))&&(n=J(n)),`${e}=${n}`}).join(`
`);P(`Environment Variables:
${t}`)}import{opendir as Q,stat as mt,mkdir as xt}from"fs/promises";import{createReadStream as yt,createWriteStream as Z}from"fs";import T from"path";async function _(t){let e=[];async function n(o){let r=await Q(o);for await(let s of r){let i=T.join(o,s.name);s.isDirectory()?await n(i):e.push(i)}}return await n(t),e}async function tt(t,e){return new Promise((n,o)=>{let r=Z(t);r.write(e),r.end(),r.on("finish",()=>n()),r.on("error",s=>o(s))}).catch(n=>{throw n})}async function et(t,e){return tt(t,e)}async function I(t,e){let n=T.join(e,"version.txt");return await et(n,t)}import*as x from"node:https";import{createReadStream as nt}from"fs";import{stat as ot}from"fs/promises";async function A(t,e){let n=await ot(e);return new Promise((o,r)=>{t.headers||(t.headers={}),t.headers["Content-Length"]=n.size;let s=x.request(t,a=>{let c="";a.on("data",u=>{c+=u}),a.on("end",async()=>{a.statusCode&&a.statusCode>=200&&a.statusCode<300?o({statusCode:a.statusCode,body:c}):r(new l(`Request to ${t.hostname} failed with status code: ${a.statusCode}. Response: ${c}`))})});s.on("error",a=>r(a));let i=nt(e);i.pipe(s),i.on("end",()=>s.end()),i.on("error",a=>{s.destroy(),r(a)})}).catch(o=>{throw o})}async function F(t,e){return new Promise((n,o)=>{t.headers||(t.headers={}),t.headers["Content-Length"]=Buffer.byteLength(e);let r=x.request(t,s=>{let i="";s.on("data",a=>{i+=a}),s.on("end",async()=>{s.statusCode&&s.statusCode>=200&&s.statusCode<300?n({statusCode:s.statusCode,body:i}):o(new l(`Request to ${t.hostname} failed with status code: ${s.statusCode}. Response: ${i}`))})});r.on("error",s=>o(s)),r.write(e),r.end()}).catch(n=>{throw n})}var w="1.0",k=`v${w} Decent Tools`;function rt(t){let e="<!-- v",n=t.indexOf(e);if(n===-1)return null;let o=n+e.length,r=t.indexOf(" ",o);return r===-1?null:t.substring(o,r)}function y(t,e){let n=` ${e}='`,o=t.indexOf(n);if(o===-1)return null;let r=o+n.length,s=t.indexOf("'",r);return s===-1?null:t.substring(r,s)}function st(t){let e=rt(t);if(!e)throw Error("Failed to parse stage index format version.");if(e!==w)throw Error(`Unsupported stage index format version ${e}.`);return e}function q(){return{productionVersion:"",rollbackVersion:"",stageVersion:""}}function U(t,e,n,o){let r=`/_${t}/${e}/`;return`<!DOCTYPE html><html><head><title>Stage Index for ${t}</title><script>
<!-- ${k}. Hand-edit at your own risk! -->
const productionVersion='${n}';
const rollbackVersion='${o}';
const stageVersion='${e}';
window.location.href='${r}';
</script></head><body></body></html>`}async function H(t){let e=`https://decentapps.net/_${t}/index.html`,n=await fetch(e);if(!n.ok)return q();let o=await n.text();try{st(o)}catch(a){return R(`Could not retrieve app versions from existing stage index at ${e}: ${a.message}.`),q()}let r=y(o,"productionVersion")??"",s=y(o,"rollbackVersion")??"";return{stageVersion:y(o,"stageVersion")??"",productionVersion:r,rollbackVersion:s}}var B="partner.decentapps.net";async function D(t,e,n,o,r,s){let i=s.replace(r,""),a={hostname:B,path:`/api/deployment/${n}/${o}/${i}`,port:443,method:"PUT",headers:{"Content-Type":"application/octet-stream",Authorization:`Bearer ${e}`,"x-repo-owner":t,Accept:"application/json"}},c=await A(a,s);if(c.statusCode<200||c.statusCode>=300)throw new l(`Failed to upload file to partner service. Status code: ${c.statusCode}. Response: ${c.body}`)}async function N(t,e,n,o,r,s,i){let a=i?`/api/deployment/${n}/index.html`:`/api/deployment/${n}/index.html?updateRoute=true`,c={hostname:B,path:a,port:443,method:"PUT",headers:{"Content-Type":"text/html",Authorization:`Bearer ${e}`,"x-repo-owner":t,Accept:"application/json"}},u=U(n,o,r,s),f=await F(c,u);if(f.statusCode<200||f.statusCode>=300)throw new Error(`Failed to upload file to partner service. Status code: ${f.statusCode}. Response: ${f.body}`)}async function it(){try{O();let t=b(),e=E(),n=m("api-key",!0),o=m("app-name",!0),r=`${V()}/dist/`;console.log(`Writing version file to ${r}...`),await I(t,r);async function s(p){let d=i[p];if(d!=="")try{await D(e,n,o,t,r,d),i[p]="",++c}catch(M){console.warn(`Failed to upload file ${d}: ${M.message}.`)}}let i=await _(r);console.log(`Found ${i.length} files to upload:`),i.forEach((p,d)=>{console.log(`  ${d+1}: ${p}`)});let a=i.map((p,d)=>()=>s(d)),c=0,u=3,f=10;for(let p=0;p<u;++p){p>0&&console.warn(`Retrying after failed uploads... (${p+1}/${u})`);try{if(await $(a,f),c===i.length)break}catch(d){console.error(`Unexpected error while uploading files: ${d.message}.`)}}c<i.length&&(c===0&&g("Failed to upload any files. See previous warnings for details."),g(`Failed to upload all files. Only ${c} of ${i.length} files were uploaded successfully. See previous warnings for details.`));let{productionVersion:G,rollbackVersion:L}=await H(o);await N(e,n,o,t,G,L,!1);let W=`https://decentapps.net/_${o}/${t}/`;S(`Successfully deployed ${c} files to ${W}.`)}catch(t){let n=`Exception: ${t.stack}`;g(n)}}it();
