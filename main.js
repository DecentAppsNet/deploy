import ut from"path";async function S(t,e){let n=t.length,o=[...t];return new Promise((s,r)=>{function a(c){c().then(()=>{if(--n===0){s();return}if(o&&o.length){let u=o.pop();u&&a(u)}}).catch(u=>r(u))}let i=Math.min(e,t.length);for(let c=0;c<i;++c){let u=o.pop();u&&a(u)}}).catch(s=>{throw s})}function X(t){return/^[0-9a-f]{7}$/i.test(t)}function J(t){return/^[0-9a-f]{40}$/i.test(t)}function E(t){return X(t)||J(t)}function T(t){return t.length>7?t.slice(0,7):t}var y=class extends Error{constructor(e){super(e),this.name="ExpectedError"}},l=y;function Q(t){console.error(`::error::${t}`)}function w(t){console.warn(`::warning::${t}`)}function Z(t){console.log(`::notice::${t}`)}function O(t){Z(`\u2705 ${t}`)}function p(t){console.log(t)}function h(t){Q(t),process.exit(1)}function m(t){console.log(`::group::${t}`)}function x(){console.log("::endgroup::")}function v(t,e=!1){let n=`INPUT_${t.replace(/ /g,"_").toUpperCase()}`,o=process.env[n];return e&&!o&&h(`Input ${t} is required.`),o||""}function V(){let t=process.env.GITHUB_SHA;if(!t)throw new l("GITHUB_SHA environment variable is not set.");if(!E(t))throw new l("GITHUB_SHA environment variable is invalid.");return T(t)}function I(){let t=process.env.GITHUB_REPOSITORY_OWNER;if(!t)throw new l("GITHUB_REPOSITORY_OWNER environment variable is not set.");return t}function _(){let t=process.env.GITHUB_WORKSPACE;if(!t)throw new l("GITHUB_WORKSPACE environment variable is not set.");return t}function F(){return process.env.GITHUB_ACTIONS==="true"}import{opendir as tt,stat as et,mkdir as wt}from"fs/promises";import{createReadStream as vt,createWriteStream as ot}from"fs";import k from"path";async function A(t){let e=[];async function n(o){let s=await tt(o);for await(let r of s){let a=k.join(o,r.name);r.isDirectory()?await n(a):e.push(a)}}return await n(t),e}async function U(t){try{return(await et(t)).isDirectory()}catch{return!1}}async function nt(t,e){return new Promise((n,o)=>{let s=ot(t);s.write(e),s.end(),s.on("finish",()=>n()),s.on("error",r=>o(r))}).catch(n=>{throw n})}async function rt(t,e){return nt(t,e)}async function q(t,e){let n=k.join(e,"version.txt");return await rt(n,t)}import*as $ from"node:https";import{createReadStream as st}from"fs";import{stat as it}from"fs/promises";async function H(t,e){let n=await it(e);return new Promise((o,s)=>{t.headers||(t.headers={}),t.headers["Content-Length"]=n.size;let r=$.request(t,i=>{let c="";i.on("data",u=>{c+=u}),i.on("end",async()=>{i.statusCode&&i.statusCode>=200&&i.statusCode<300?o({statusCode:i.statusCode,body:c}):s(new l(`Request to ${t.hostname} failed with status code: ${i.statusCode}. Response: ${c}`))})});r.on("error",i=>s(i));let a=st(e);a.pipe(r),a.on("end",()=>r.end()),a.on("error",i=>{r.destroy(),s(i)})}).catch(o=>{throw o})}async function B(t,e){return new Promise((n,o)=>{t.headers||(t.headers={}),t.headers["Content-Length"]=Buffer.byteLength(e);let s=$.request(t,r=>{let a="";r.on("data",i=>{a+=i}),r.on("end",async()=>{r.statusCode&&r.statusCode>=200&&r.statusCode<300?n({statusCode:r.statusCode,body:a}):o(new l(`Request to ${t.hostname} failed with status code: ${r.statusCode}. Response: ${a}`))})});s.on("error",r=>o(r)),s.write(e),s.end()}).catch(n=>{throw n})}var C="1.0",G=`v${C} Decent Tools`;function at(t){let e="<!-- v",n=t.indexOf(e);if(n===-1)return null;let o=n+e.length,s=t.indexOf(" ",o);return s===-1?null:t.substring(o,s)}function P(t,e){let n=` ${e}='`,o=t.indexOf(n);if(o===-1)return null;let s=o+n.length,r=t.indexOf("'",s);return r===-1?null:t.substring(s,r)}function ct(t){let e=at(t);if(!e)throw Error("Failed to parse stage index format version.");if(e!==C)throw Error(`Unsupported stage index format version ${e}.`);return e}function D(){return{productionVersion:"",rollbackVersion:"",stageVersion:""}}function N(t,e,n,o){let s=`/_${t}/${e}/`;return`<!DOCTYPE html><html><head><title>Stage Index for ${t}</title><script>
<!-- ${G}. Hand-edit at your own risk! -->
const productionVersion='${n}';
const rollbackVersion='${o}';
const stageVersion='${e}';
window.location.href='${s}';
</script></head><body></body></html>`}async function L(t){let e=`https://decentapps.net/_${t}/index.html`,n=await fetch(e);if(!n.ok)return D();let o=await n.text();try{ct(o)}catch(i){return w(`Could not retrieve app versions from existing stage index at ${e}: ${i.message}.`),D()}let s=P(o,"productionVersion")??"",r=P(o,"rollbackVersion")??"";return{stageVersion:P(o,"stageVersion")??"",productionVersion:s,rollbackVersion:r}}var W="partner.decentapps.net";async function j(t,e,n,o,s,r){let a=r.replace(s,""),i={hostname:W,path:`/api/deployment/${n}/${o}/${a}`,port:443,method:"PUT",headers:{"Content-Type":"application/octet-stream",Authorization:`Bearer ${e}`,"x-repo-owner":t,Accept:"application/json"}},c=await H(i,r);if(c.statusCode<200||c.statusCode>=300)throw new l(`Failed to upload file to partner service. Status code: ${c.statusCode}. Response: ${c.body}`)}async function M(t,e,n,o,s,r,a){let i=a?`/api/deployment/${n}/index.html`:`/api/deployment/${n}/index.html?updateRoute=true`,c={hostname:W,path:i,port:443,method:"PUT",headers:{"Content-Type":"text/html",Authorization:`Bearer ${e}`,"x-repo-owner":t,Accept:"application/json"}},u=N(n,o,s,r),g=await B(c,u);if(g.statusCode<200||g.statusCode>=300)throw new Error(`Failed to upload file to partner service. Status code: ${g.statusCode}. Response: ${g.body}`)}async function pt(){try{m("Collecting inputs"),p("commit hash");let t=V();p("repo owner");let e=I();p("Decent API key");let n=v("api-key",!0);p("app name");let o=v("app-name",!0);p("project local path");let s=_();x(),m("Preparing local dist path and version file"),p("check for dist directory");let r=ut.join(s,"dist");await U(r)||h("Local dist directory missing. Your Github workflow (e.g., .github/workflows/deploy.yml) should check out your project and build/copy to the ./dist folder all files meant for deployment."),p("write version file"),await q(t,r),x(),m("Preparing files for upload");async function a(f){let d=i[f];if(d!=="")try{p(`upload ${d}`),await j(e,n,o,t,r,d),i[f]="",++u}catch(K){console.warn(`Failed to upload file ${d}: ${K.message}.`)}}p("find files at local dist path");let i=await A(r);i.length===1&&w("No files found in ./dist directory besides version.txt. Is your project building to ./dist?"),p("prepare upload tasks");let c=i.map((f,d)=>()=>a(d));x(),m(`Uploading ${c.length} files`);let u=0,g=3,Y=10;for(let f=0;f<g;++f){f>0&&console.warn(`Retrying after failed uploads... (${f+1}/${g})`);try{if(await S(c,Y),u===i.length)break}catch(d){d(`Unexpected error while uploading files: ${d.message}.`)}}u<i.length&&(u===0&&h("Failed to upload any files. See previous warnings for details."),h(`Failed to upload all files. Only ${u} of ${i.length} files were uploaded successfully. See previous warnings for details.`)),x(),m("Updating stage index"),p("fetch app versions");let{productionVersion:R,rollbackVersion:b}=await L(o);p(`uploading new stage index - stage version=${t}, production version=${R}, rollback version=${b}`),await M(e,n,o,t,R,b,!1),x();let z=`https://decentapps.net/_${o}/${t}/`;O(`Successfully deployed ${u} files to ${z}.`)}catch(t){let n=!F()||t.name==="ExpectedError"?t.message:"An unexpected error occurred.";h(n)}}pt();
