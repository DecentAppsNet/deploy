async function S(t,e){let o=t.length,n=[...t];return new Promise((r,s)=>{function i(c){c().then(()=>{if(--o===0){r();return}if(n&&n.length){let u=n.pop();u&&i(u)}}).catch(u=>s(u))}let a=Math.min(e,t.length);for(let c=0;c<a;++c){let u=n.pop();u&&i(u)}}).catch(r=>{throw r})}function Y(t){return/^[0-9a-f]{7}$/i.test(t)}function X(t){return/^[0-9a-f]{40}$/i.test(t)}function b(t){return Y(t)||X(t)}function T(t){return t.length>7?t.slice(0,7):t}var w=class extends Error{constructor(e){super(e),this.name="ExpectedError"}},l=w;function J(t){console.error(`::error::${t}`)}function O(t){console.warn(`::warning::${t}`)}function Q(t){console.log(`::notice::${t}`)}function E(t){Q(`\u2705 ${t}`)}function p(t){console.log(t)}function x(t){J(t),process.exit(1)}function h(t){console.log(`::group::${t}`)}function m(){console.log("::endgroup::")}function y(t,e=!1){let o=`INPUT_${t.replace(/ /g,"_").toUpperCase()}`,n=process.env[o];return e&&!n&&x(`Input ${t} is required.`),n||""}function V(){let t=process.env.GITHUB_SHA;if(!t)throw new l("GITHUB_SHA environment variable is not set.");if(!b(t))throw new l("GITHUB_SHA environment variable is invalid.");return T(t)}function _(){let t=process.env.GITHUB_REPOSITORY_OWNER;if(!t)throw new l("GITHUB_REPOSITORY_OWNER environment variable is not set.");return t}function I(){let t=process.env.GITHUB_WORKSPACE;if(!t)throw new l("GITHUB_WORKSPACE environment variable is not set.");return t}function A(){return process.env.GITHUB_ACTIONS==="true"}import{opendir as Z,stat as tt,mkdir as et}from"fs/promises";import{createReadStream as yt,createWriteStream as nt}from"fs";import F from"path";async function k(t){let e=[];async function o(n){let r=await Z(n);for await(let s of r){let i=F.join(n,s.name);s.isDirectory()?await o(i):e.push(i)}}return await o(t),e}async function ot(t){try{return(await tt(t)).isDirectory()}catch{return!1}}async function U(t){await ot(t)||await et(t,{recursive:!0})}async function rt(t,e){return new Promise((o,n)=>{let r=nt(t);r.write(e),r.end(),r.on("finish",()=>o()),r.on("error",s=>n(s))}).catch(o=>{throw o})}async function st(t,e){return rt(t,e)}async function q(t,e){let o=F.join(e,"version.txt");return await st(o,t)}import*as $ from"node:https";import{createReadStream as it}from"fs";import{stat as at}from"fs/promises";async function H(t,e){let o=await at(e);return new Promise((n,r)=>{t.headers||(t.headers={}),t.headers["Content-Length"]=o.size;let s=$.request(t,a=>{let c="";a.on("data",u=>{c+=u}),a.on("end",async()=>{a.statusCode&&a.statusCode>=200&&a.statusCode<300?n({statusCode:a.statusCode,body:c}):r(new l(`Request to ${t.hostname} failed with status code: ${a.statusCode}. Response: ${c}`))})});s.on("error",a=>r(a));let i=it(e);i.pipe(s),i.on("end",()=>s.end()),i.on("error",a=>{s.destroy(),r(a)})}).catch(n=>{throw n})}async function B(t,e){return new Promise((o,n)=>{t.headers||(t.headers={}),t.headers["Content-Length"]=Buffer.byteLength(e);let r=$.request(t,s=>{let i="";s.on("data",a=>{i+=a}),s.on("end",async()=>{s.statusCode&&s.statusCode>=200&&s.statusCode<300?o({statusCode:s.statusCode,body:i}):n(new l(`Request to ${t.hostname} failed with status code: ${s.statusCode}. Response: ${i}`))})});r.on("error",s=>n(s)),r.write(e),r.end()}).catch(o=>{throw o})}var v="1.0",D=`v${v} Decent Tools`;function ct(t){let e="<!-- v",o=t.indexOf(e);if(o===-1)return null;let n=o+e.length,r=t.indexOf(" ",n);return r===-1?null:t.substring(n,r)}function C(t,e){let o=` ${e}='`,n=t.indexOf(o);if(n===-1)return null;let r=n+o.length,s=t.indexOf("'",r);return s===-1?null:t.substring(r,s)}function ut(t){let e=ct(t);if(!e)throw Error("Failed to parse stage index format version.");if(e!==v)throw Error(`Unsupported stage index format version ${e}.`);return e}function G(){return{productionVersion:"",rollbackVersion:"",stageVersion:""}}function N(t,e,o,n){let r=`/_${t}/${e}/`;return`<!DOCTYPE html><html><head><title>Stage Index for ${t}</title><script>
<!-- ${D}. Hand-edit at your own risk! -->
const productionVersion='${o}';
const rollbackVersion='${n}';
const stageVersion='${e}';
window.location.href='${r}';
</script></head><body></body></html>`}async function L(t){let e=`https://decentapps.net/_${t}/index.html`,o=await fetch(e);if(!o.ok)return G();let n=await o.text();try{ut(n)}catch(a){return O(`Could not retrieve app versions from existing stage index at ${e}: ${a.message}.`),G()}let r=C(n,"productionVersion")??"",s=C(n,"rollbackVersion")??"";return{stageVersion:C(n,"stageVersion")??"",productionVersion:r,rollbackVersion:s}}var W="partner.decentapps.net";async function M(t,e,o,n,r,s){let i=s.replace(r,""),a={hostname:W,path:`/api/deployment/${o}/${n}/${i}`,port:443,method:"PUT",headers:{"Content-Type":"application/octet-stream",Authorization:`Bearer ${e}`,"x-repo-owner":t,Accept:"application/json"}},c=await H(a,s);if(c.statusCode<200||c.statusCode>=300)throw new l(`Failed to upload file to partner service. Status code: ${c.statusCode}. Response: ${c.body}`)}async function j(t,e,o,n,r,s,i){let a=i?`/api/deployment/${o}/index.html`:`/api/deployment/${o}/index.html?updateRoute=true`,c={hostname:W,path:a,port:443,method:"PUT",headers:{"Content-Type":"text/html",Authorization:`Bearer ${e}`,"x-repo-owner":t,Accept:"application/json"}},u=N(o,n,r,s),g=await B(c,u);if(g.statusCode<200||g.statusCode>=300)throw new Error(`Failed to upload file to partner service. Status code: ${g.statusCode}. Response: ${g.body}`)}async function pt(){try{h("Collecting required inputs"),p("get commit hash");let t=V();p("get repo owner");let e=_();p("get Decent API key");let o=y("api-key",!0);p("get app name");let n=y("app-name",!0);m(),h("Preparing local dist path and version file");let r=`${I()}/dist/`;p("create dist directory"),await U(r),p("write version file"),await q(t,r),m(),h("Preparing files for upload");async function s(f){let d=i[f];if(d!=="")try{p(`upload ${d}`),await M(e,o,n,t,r,d),i[f]="",++c}catch(K){console.warn(`Failed to upload file ${d}: ${K.message}.`)}}p("find files at local dist path");let i=await k(r);p("prepare upload tasks");let a=i.map((f,d)=>()=>s(d));m(),h(`Uploading ${a.length} files`);let c=0,u=3,g=10;for(let f=0;f<u;++f){f>0&&console.warn(`Retrying after failed uploads... (${f+1}/${u})`);try{if(await S(a,g),c===i.length)break}catch(d){d(`Unexpected error while uploading files: ${d.message}.`)}}c<i.length&&(c===0&&x("Failed to upload any files. See previous warnings for details."),x(`Failed to upload all files. Only ${c} of ${i.length} files were uploaded successfully. See previous warnings for details.`)),m(),h("Updating stage index"),p("fetch app versions");let{productionVersion:R,rollbackVersion:P}=await L(n);p(`uploading new stage index - stage version=${t}, production version=${R}, rollback version=${P}`),await j(e,o,n,t,R,P,!1),m();let z=`https://decentapps.net/_${n}/${t}/`;E(`Successfully deployed ${c} files to ${z}.`)}catch(t){let o=!A()||t.name==="ExpectedError"?t.message:"An unexpected error occurred.";x(o)}}pt();
